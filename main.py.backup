import os
import logging
import aiohttp
import asyncio
import aiosqlite
import telegram
import portalocker
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler, CallbackQueryHandler
from telegram import BotCommand, ReplyKeyboardMarkup, Update
from dotenv import load_dotenv
import datetime
# імпортуємо ваші модулі
import jobs
import db
import config
import handlers
from handlers import translator_conversation_handler
# Налаштування логування
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)
# === НОВА ФУНКЦІЯ: для ініціалізації сесій та ресурсів асинхронно ===
async def post_init_setup(application: Application) -> None:
    """Ініціалізує асинхронні сесії для бази даних та HTTP-запитів."""
    application.bot_data['aiohttp_session'] = aiohttp.ClientSession()
    application.bot_data['db_session'] = await aiosqlite.connect(config.DB_NAME)
    application.bot_data['target_region'] = config.TARGET_REGION
    logger.info("Асинхронні сесії успішно ініціалізовані.")
    # === НОВИЙ КОД: ВСТАНОВЛЕННЯ КОМАНД МЕНЮ ДЛЯ БОТА ===
    bot_commands = [
        BotCommand("start", "Почати роботу з ботом"),
        BotCommand("help", "Показати список команд"),
        BotCommand("status", "Дізнатися про статус бота"),
        BotCommand("currency", "Показати курс валют"),
        BotCommand("announcements", "Переглянути оголошення"),
        BotCommand("add_post", "Додати оголошення"),
        BotCommand("feedback", "Залишити зворотний зв'язок"),
        BotCommand("directory", "Довідник"),
        BotCommand("force_alerts", "Примусова перевірка тривог (для адміна)"),
        BotCommand("force_events_today", "Примусове відправлення подій на сьогодні (для адміна)"),
        BotCommand("force_events_tomorrow", "Примусове відправлення подій на завтра (для адміна)")
    ]
    await application.bot.set_my_commands(bot_commands)
    logger.info("Команди меню бота успішно встановлені.")
# === НОВА ФУНКЦІЯ: для завершення роботи асинхронних сесій ===
async def shutdown(application: Application) -> None:
    """Закриває асинхронні сесії для бази даних та HTTP-запитів."""
    await application.bot_data['aiohttp_session'].close()
    await application.bot_data['db_session'].close()
    logger.info("Асинхронні сесії успішно закриті.")
def main() -> None:
    """Запускає бота."""
    # Завантажуємо токени та ID з .env
    load_dotenv()
    # Створюємо екземпляр Application та передаємо токен
    application = Application.builder().token(config.TELEGRAM_BOT_TOKEN).post_init(post_init_setup).post_shutdown(shutdown).build()
    # ДОДАЄМО ОБРОБНИКИ ДІАЛОГІВ ПЕРШИМИ
    application.add_handler(handlers.feedback_conversation_handler)
    application.add_handler(handlers.add_post_conversation_handler)
    application.add_handler(handlers.translator_conversation_handler)
    # Додаємо інші обробники
    application.add_handler(CommandHandler("start", handlers.start_command))
    application.add_handler(CommandHandler("status", handlers.status_command))
    application.add_handler(CommandHandler("help", handlers.help_command))
    application.add_handler(CommandHandler("currency", handlers.currency_command))
    application.add_handler(CommandHandler("announcements", handlers.announcements_command))
    application.add_handler(CommandHandler("directory", handlers.directory_menu))
    # Обробники адміністративних команд
    application.add_handler(CommandHandler("force_alerts", jobs.force_check_alerts))
    application.add_handler(CommandHandler("force_events_today", jobs.force_send_events_today))
    application.add_handler(CommandHandler("force_events_tomorrow", jobs.force_send_events_tomorrow))
    # Обробник текстових повідомлень (повинен бути після команд!)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handlers.text_handler))
    # Обробники кнопок
    application.add_handler(CallbackQueryHandler(handlers.delete_post_callback, pattern=r'^delete_post_'))
    application.add_handler(CallbackQueryHandler(handlers.directory_show_items, pattern=r'^dir_cat:'))
    application.add_handler(CallbackQueryHandler(handlers.directory_show_item_details, pattern=r'^dir_item:'))
    application.add_handler(CallbackQueryHandler(handlers.directory_menu, pattern=r'^dir_menu$'))
    application.add_handler(CallbackQueryHandler(handlers.main_menu_from_callback, pattern=r'^main_menu$'))
    # Додаємо завдання до планувальника python-telegram-bot
    application.job_queue.run_repeating(jobs.check_for_alerts, interval=30, name='check_for_alerts')
    application.job_queue.run_daily(jobs.send_events_today, time=datetime.time(hour=7, minute=0), name='send_events_today')
    application.job_queue.run_daily(jobs.send_events_tomorrow, time=datetime.time(hour=21, minute=0), name='send_events_tomorrow')
    logger.info("Бот запущений. Відстежуємо регіон: %s", config.TARGET_REGION)
    # Запускаємо бота
    application.run_polling(allowed_updates=Update.ALL_TYPES)
if __name__ == '__main__':
    main()

