import translator_api
import json
import logging
import re
import asyncio
from telegram import Update, Bot, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.constants import ChatAction, ParseMode
from telegram.ext import ContextTypes, ConversationHandler, MessageHandler, filters, CommandHandler, CallbackQueryHandler
from typing import List, Dict, Any, Optional
from datetime import datetime
from utils import format_event_message, format_post_message
from aiosqlite import Connection
import config
import db
import api
TRANSLATOR = 1
# --- –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –¥—ñ–∞–ª–æ–≥—É –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –∑–≤'—è–∑–∫—É (Feedback Conversation) ---
async def feedback_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ—á–∞—Ç–æ–∫ –¥—ñ–∞–ª–æ–≥—É –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –∑–≤'—è–∑–∫—É."""
    await update.message.reply_text("–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –∑–≤'—è–∑–∫—É. –©–æ–± —Å–∫–∞—Å—É–≤–∞—Ç–∏, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å /cancel.")
    return config.FEEDBACK
async def feedback_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–æ–±–ª—è—î –æ—Ç—Ä–∏–º–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –∑–≤'—è–∑–∫—É."""
    feedback_text = update.message.text
    user = update.effective_user
    logging.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –∑–≤–æ—Ä–æ—Ç–Ω–∏–π –∑–≤'—è–∑–æ–∫ –≤—ñ–¥ @{user.username} ({user.id}): {feedback_text}")
    await update.message.reply_text("–î—è–∫—É—é! –í–∞—à –≤—ñ–¥–≥—É–∫ –æ—Ç—Ä–∏–º–∞–Ω–æ. –Ø –ø–µ—Ä–µ–¥–∞–≤ –π–æ–≥–æ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—É. –ú–æ–∂–µ—Ç–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–≤–∏–π –∞–±–æ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ –±–æ—Ç–æ–º.")
    return ConversationHandler.END
async def feedback_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–∫–∞—Å–æ–≤—É—î –¥—ñ–∞–ª–æ–≥ –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –∑–≤'—è–∑–∫—É."""
    await update.message.reply_text("–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–≥—É–∫—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    return ConversationHandler.END
# --- –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –¥—ñ–∞–ª–æ–≥—É –¥–æ–¥–∞–≤–∞–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è (Add Post Conversation) ---
async def add_post_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ—á–∞—Ç–æ–∫ –¥—ñ–∞–ª–æ–≥—É –¥–æ–¥–∞–≤–∞–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è."""
    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –≤–∞—à–æ–≥–æ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è. –©–æ–± —Å–∫–∞—Å—É–≤–∞—Ç–∏, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å /cancel.")
    return config.POST_TITLE
async def add_post_title(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–æ–±–ª—è—î –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è."""
    context.user_data['post_title'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –ø–æ–≤–Ω–∏–π —Ç–µ–∫—Å—Ç –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è:")
    return config.POST_CONTENT
async def add_post_content(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–æ–±–ª—è—î –≤–º—ñ—Å—Ç –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è."""
    context.user_data['post_content'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é (—Ç–µ–ª–µ—Ñ–æ–Ω, –Ω—ñ–∫–Ω–µ–π–º, –ø–æ—Å–∏–ª–∞–Ω–Ω—è):")
    return config.POST_CONTACT
async def add_post_contact(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–æ–±–ª—è—î –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é —Ç–∞ –ø—Ä–æ–ø–æ–Ω—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏."""
    context.user_data['post_contact'] = update.message.text
    post_title = context.user_data['post_title']
    post_content = context.user_data['post_content']
    post_contact = context.user_data['post_contact']
    preview_message = (
        f"**–ó–∞–≥–æ–ª–æ–≤–æ–∫:** {post_title}\n"
        f"**–û–ø–∏—Å:** {post_content}\n"
        f"**–ö–æ–Ω—Ç–∞–∫—Ç–∏:** {post_contact}\n\n"
        f"**–ß–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤—Å–µ –≤–∫–∞–∑–∞–Ω–æ?**\n"
        f"–ù–∞–¥—ñ—à–ª—ñ—Ç—å '–¢–∞–∫' –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∞–±–æ '–ù—ñ' –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è."
    )
    await update.message.reply_text(preview_message, parse_mode=ParseMode.MARKDOWN)
    return config.POST_CONFIRM
async def add_post_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—î –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è."""
    response = update.message.text.lower()
    if response == '—Ç–∞–∫':
        db_session = context.bot_data['db_session']
        author_id = update.effective_user.id
        title = context.user_data['post_title']
        content = context.user_data['post_content']
        contact_info = context.user_data['post_contact']
        await db.save_post(db_session, author_id, title, content, contact_info)
        await update.message.reply_text("–í–∞—à–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!")
        logging.info(f"–ù–æ–≤–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –¥–æ–¥–∞–Ω–æ: {title}")
        context.user_data.clear()
        return ConversationHandler.END
    elif response == '–Ω—ñ':
        await update.message.reply_text("–î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
        context.user_data.clear()
        return ConversationHandler.END
    else:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å '–¢–∞–∫' –∞–±–æ '–ù—ñ'.")
        return config.POST_CONFIRM
async def add_post_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–∫–∞—Å–æ–≤—É—î –¥—ñ–∞–ª–æ–≥ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è."""
    await update.message.reply_text("–î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    context.user_data.clear()
    return ConversationHandler.END
feedback_conversation_handler = ConversationHandler(
    entry_points=[CommandHandler("feedback", feedback_start), MessageHandler(filters.Regex(r'^‚úçÔ∏è –ó–≤–æ—Ä–æ—Ç–Ω–∏–π –∑–≤\'—è–∑–æ–∫$'), feedback_start)],
    states={
        config.FEEDBACK: [MessageHandler(filters.TEXT & ~filters.COMMAND, feedback_received)],
    },
    fallbacks=[CommandHandler("cancel", feedback_cancel)]
)
add_post_conversation_handler = ConversationHandler(
    entry_points=[CommandHandler("add_post", add_post_start), MessageHandler(filters.Regex('^üìù –î–æ–¥–∞—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è$'), add_post_start)],
    states={
        config.POST_TITLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_post_title)],
        config.POST_CONTENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_post_content)],
        config.POST_CONTACT: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_post_contact)],
        config.POST_CONFIRM: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_post_confirm)],
    },
    fallbacks=[CommandHandler("cancel", add_post_cancel)]
)
# --- –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –¥—ñ–∞–ª–æ–≥—É –ø–µ—Ä–µ–∫–ª–∞–¥–∞—á–∞ (Translator Conversation) ---
TRANSLATOR_LANG, TRANSLATOR_TEXT = range(2)

async def translator_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ—á–∞—Ç–æ–∫ –¥—ñ–∞–ª–æ–≥—É –ø–µ—Ä–µ–∫–ª–∞–¥–∞—á–∞."""
    try:
        with open('languages.json', 'r', encoding='utf-8') as f:
            languages_data = json.load(f)
            available_langs = languages_data.get('available_languages', {})
        keyboard = []
        for code, name in available_langs.items():
            keyboard.append([InlineKeyboardButton(f"{name} ({code.upper()})", callback_data=f"translate_lang:{code}")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É, –Ω–∞ —è–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–µ—Ä–µ–∫–ª–∞—Å—Ç–∏ —Ç–µ–∫—Å—Ç:", reply_markup=reply_markup)
        return TRANSLATOR_LANG
    except FileNotFoundError:
        await update.message.reply_text("–í–∏–±–∞—á—Ç–µ, —Ñ–∞–π–ª –∑—ñ —Å–ø–∏—Å–∫–æ–º –º–æ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return ConversationHandler.END
    except json.JSONDecodeError:
        await update.message.reply_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —á–∏—Ç–∞–Ω–Ω—ñ —Ñ–∞–π–ª—É –º–æ–≤. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return ConversationHandler.END

async def translator_lang_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä –º–æ–≤–∏ —Ç–∞ –∑–∞–ø–∏—Ç—É—î —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É."""
    query = update.callback_query
    await query.answer()
    _, target_lang = query.data.split(':')
    context.user_data['target_lang'] = target_lang
    await query.edit_message_text(f"–û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É, –Ω–∞ —è–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–µ—Ä–µ–∫–ª–∞—Å—Ç–∏ —Ç–µ–∫—Å—Ç: **{target_lang.upper()}**\n\n–¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–µ–∫—Å—Ç, —è–∫–∏–π –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–µ—Ä–µ–∫–ª–∞—Å—Ç–∏. –©–æ–± —Å–∫–∞—Å—É–≤–∞—Ç–∏, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å /cancel.", parse_mode=ParseMode.MARKDOWN)
    return TRANSLATOR_TEXT

async def translator_text_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–µ—Ä–µ–∫–ª–∞–¥–∞—î –æ—Ç—Ä–∏–º–∞–Ω–∏–π —Ç–µ–∫—Å—Ç —ñ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
    text_to_translate = update.message.text
    target_lang = context.user_data.get('target_lang', 'en')
    if not text_to_translate:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É.")
        return TRANSLATOR_TEXT
    try:
        translated_text = await translator_api.translate_text(text=text_to_translate, source_lang='auto', target_lang=target_lang)
        if translated_text:
            await update.message.reply_text(f"**–ü–µ—Ä–µ–∫–ª–∞–¥:**\n\n`{translated_text}`", parse_mode=ParseMode.MARKDOWN)
        else:
            await update.message.reply_text("–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–∫–ª–∞—Å—Ç–∏ —Ç–µ–∫—Å—Ç. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
    except Exception as e:
        await update.message.reply_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø–µ—Ä–µ–∫–ª–∞–¥—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
    return ConversationHandler.END

async def translator_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–∫–∞—Å–æ–≤—É—î –¥—ñ–∞–ª–æ–≥ –ø–µ—Ä–µ–∫–ª–∞–¥–∞—á–∞."""
    await update.message.reply_text("–ü–µ—Ä–µ–∫–ª–∞–¥ —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    return ConversationHandler.END

translator_conversation_handler = ConversationHandler(
    entry_points=[CommandHandler("translator", translator_start), MessageHandler(filters.Regex('^üó£Ô∏è –ü–µ—Ä–µ–∫–ª–∞–¥–∞—á$'), translator_start)],
    states={
        TRANSLATOR_LANG: [CallbackQueryHandler(translator_lang_selected, pattern=r'^translate_lang:')],
        TRANSLATOR_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, translator_text_received)],
    },
    fallbacks=[CommandHandler("cancel", translator_cancel)]
)
