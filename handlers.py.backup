import translator_api
import json
import logging
import re
import asyncio
from telegram import Update, Bot, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.constants import ChatAction, ParseMode
from telegram.ext import ContextTypes, ConversationHandler, MessageHandler, filters, CommandHandler, CallbackQueryHandler, CallbackContext
from typing import List, Dict, Any, Optional
from utils import split_text, format_event_message, format_post_message, format_currency_message, is_admin, load_directory_data
from datetime import datetime
from aiosqlite import Connection
import config
import db
import api
TRANSLATOR = 1
# ===== –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥ —Ç–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å =====
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start."""
    keyboard = ReplyKeyboardMarkup(
    [['üì¢ –¢—Ä–∏–≤–æ–≥–∏', 'üí∞ –ö—É—Ä—Å –≤–∞–ª—é—Ç'],
     ['üìù –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è', 'üìù –î–æ–¥–∞—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è'],
     ["‚úçÔ∏è –ó–≤–æ—Ä–æ—Ç–Ω–∏–π –∑–≤'—è–∑–æ–∫", "üó£Ô∏è –ü–µ—Ä–µ–∫–ª–∞–¥–∞—á", "üó∫Ô∏è –î–æ–≤—ñ–¥–Ω–∏–∫"]],
    resize_keyboard=True
)
    # 1. –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ñ–æ—Ç–æ —Ç–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é
    await update.message.reply_photo(
        photo=config.WELCOME_PHOTO_ID,
        caption="–ü—Ä–∏–≤—ñ—Ç! –Ø –≤–∞—à –±–æ—Ç, —â–æ —ñ–Ω—Ñ–æ—Ä–º—É—î –ø—Ä–æ –ø–æ–≤—ñ—Ç—Ä—è–Ω—ñ —Ç—Ä–∏–≤–æ–≥–∏, –Ω–æ–≤–∏–Ω–∏ —Ç–∞ –ø–æ–¥—ñ—ó —É –ë—ñ–ª–≥–æ—Ä–æ–¥-–î–Ω—ñ—Å—Ç—Ä–æ–≤—Å—å–∫–æ–º—É.",
        reply_markup=keyboard
    )
    # 2. –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü—ñ—é –¥—Ä—É–≥–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º
    presentation_text = """
üá∫üá¶ –ü—Ä–∏–≤—ñ—Ç! –ó–Ω–∞–π–æ–º—Ç–µ—Å—å –∑ –≤–∞—à–∏–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–º –±–æ—Ç–æ–º –¥–ª—è –ë—ñ–ª–≥–æ—Ä–æ–¥-–î–Ω—ñ—Å—Ç—Ä–æ–≤—Å—å–∫–æ–≥–æ!

–Ø –¥–æ–ø–æ–º–æ–∂—É –≤–∞–º –∑–∞–ª–∏—à–∞—Ç–∏—Å—å –≤ –∫—É—Ä—Å—ñ –ø–æ–¥—ñ–π —Ç–∞ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –≤–∞–∂–ª–∏–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é.

üì¢ **–ì–æ–ª–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:**

‚ö°Ô∏è –û–ø–µ—Ä–∞—Ç–∏–≤–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–≤—ñ—Ç—Ä—è–Ω—ñ —Ç—Ä–∏–≤–æ–≥–∏ —Ç–∞ –≤—ñ–¥–±–æ—ó.
üí∞ –ê–∫—Ç—É–∞–ª—å–Ω–∏–π –∫—É—Ä—Å –≤–∞–ª—é—Ç.
üìù –î–æ—à–∫–∞ –æ–≥–æ–ª–æ—à–µ–Ω—å –¥–ª—è –≤–∞—à–æ—ó —Å–ø—ñ–ª—å–Ω–æ—Ç–∏.
üó∫Ô∏è –ó—Ä—É—á–Ω–∏–π –¥–æ–≤—ñ–¥–Ω–∏–∫ –∫–æ—Ä–∏—Å–Ω–∏—Ö –∑–∞–∫–ª–∞–¥—ñ–≤ —Ç–∞ –ø–æ—Å–ª—É–≥.
‚úçÔ∏è –ó–≤–æ—Ä–æ—Ç–Ω–∏–π –∑–≤'—è–∑–æ–∫ –∑ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–æ–º.

–ó–∞–ø—É—Å–∫–∞–π—Ç–µ —ñ –∫–æ—Ä–∏—Å—Ç—É–π—Ç–µ—Å—å!
‚û°Ô∏è t.me/XuBotAkkerman\_bot
"""
    await update.message.reply_text(presentation_text, parse_mode=ParseMode.MARKDOWN)
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /help."""
    text = (
        "–Ø –º–æ–∂—É —ñ–Ω—Ñ–æ—Ä–º—É–≤–∞—Ç–∏ –≤–∞—Å –ø—Ä–æ –ø–æ–≤—ñ—Ç—Ä—è–Ω—ñ —Ç—Ä–∏–≤–æ–≥–∏ —Ç–∞ –ø–æ–¥—ñ—ó –≤ –ë—ñ–ª–≥–æ—Ä–æ–¥-–î–Ω—ñ—Å—Ç—Ä–æ–≤—Å—å–∫–æ–º—É, –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω–∏–π –∫—É—Ä—Å...\""
    )
    await update.message.reply_text(text)
async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞."""
    db_session = context.bot_data['db_session']
    try:
        current_alerts = await db.get_last_alerts_state(db_session)
        if current_alerts:
            message = f"üî¥ **–ê–∫—Ç–∏–≤–Ω—ñ –ø–æ–≤—ñ—Ç—Ä—è–Ω—ñ —Ç—Ä–∏–≤–æ–≥–∏ –≤ —Ä–µ–≥—ñ–æ–Ω–∞—Ö:**\n\n" + "\n".join(f"- {region}" for region in current_alerts)
        else:
            message = "üü¢ **–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –ø–æ–≤—ñ—Ç—Ä—è–Ω–∏—Ö —Ç—Ä–∏–≤–æ–≥.**"
        await update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç—É—Å—É —Ç—Ä–∏–≤–æ–≥: {e}", exc_info=True)
        await update.message.reply_text("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å –ø–æ–≤—ñ—Ç—Ä—è–Ω–∏—Ö —Ç—Ä–∏–≤–æ–≥. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
async def currency_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –∞–∫—Ç—É–∞–ª—å–Ω–∏–π –∫—É—Ä—Å –≤–∞–ª—é—Ç."""
    logging.info("–û—Ç—Ä–∏–º—É—é –∫—É—Ä—Å–∏ –≤–∞–ª—é—Ç...")
    aiohttp_session = context.bot_data.get('aiohttp_session')
    if not aiohttp_session:
        await update.message.reply_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        return
    data = await api.get_currency_rates(aiohttp_session)
    if data:
        message = format_currency_message(data)
        await update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)
    else:
        await update.message.reply_text("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫—É—Ä—Å–∏ –≤–∞–ª—é—Ç. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
async def announcements_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –æ–≥–æ–ª–æ—à–µ–Ω—å."""
    logging.info("–ü–æ—á–∞—Ç–æ–∫ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏ 'announcements_command'")
    db_session = context.bot_data.get('db_session')
    if not db_session:
        logging.error("–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ db_session.")
        await update.message.reply_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        return
    try:
        posts = await db.get_posts(db_session)
        logging.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –æ–≥–æ–ª–æ—à–µ–Ω—å: {len(posts) if posts else 0}")
        if not posts:
            await update.message.reply_text("–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –æ–≥–æ–ª–æ—à–µ–Ω—å.")
            return
        messages = []
        for post in posts:
            message = format_post_message(post)
            keyboard = None
            if is_admin(update.effective_user.id):
                keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("–í–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"delete_post_{post['id']}") ]])
            messages.append((message, keyboard))
        for msg, kb in messages:
            for part in split_text(msg):
                await update.message.reply_text(part, parse_mode=ParseMode.MARKDOWN, reply_markup=kb)
        logging.info("–£—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è.")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ announcements_command: {e}", exc_info=True)
        await update.message.reply_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –æ–≥–æ–ª–æ—à–µ–Ω—å. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
async def delete_post_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ '–í–∏–¥–∞–ª–∏—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è'."""
    query = update.callback_query
    post_id = int(query.data.split('_')[-1])
    db_session = context.bot_data.get('db_session')
    if not db_session:
        await query.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞.")
        return
    if not is_admin(query.from_user.id):
        await query.answer("–í–∏ –Ω–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä.")
        return
    await db.delete_post(db_session, post_id)
    await query.answer("–û–≥–æ–ª–æ—à–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ.")
    await query.edit_message_text(f"–û–≥–æ–ª–æ—à–µ–Ω–Ω—è #{post_id} —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.")
async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å, —â–æ –Ω–µ —î –∫–æ–º–∞–Ω–¥–∞–º–∏."""
    if update.message.chat.type != 'private':
        return
    if update.message.text == 'üì¢ –¢—Ä–∏–≤–æ–≥–∏':
        await status_command(update, context)
    elif update.message.text == 'üí∞ –ö—É—Ä—Å –≤–∞–ª—é—Ç':
        await currency_command(update, context)
    elif update.message.text == 'üìù –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è':
        await announcements_command(update, context)
    elif update.message.text == 'üó∫Ô∏è –î–æ–≤—ñ–¥–Ω–∏–∫':
        await directory_menu(update, context)
    elif update.message.text == 'üó£Ô∏è –ü–µ—Ä–µ–∫–ª–∞–¥–∞—á':
        await translator_start(update, context)
    else:
        await update.message.reply_text("–í–∏–±–∞—á—Ç–µ, —è –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ—ó –∫–æ–º–∞–Ω–¥–∏. –°–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –º–µ–Ω—é –∞–±–æ –∫–æ–º–∞–Ω–¥–æ—é /help.")
# === –§–£–ù–ö–¶–Ü–á –î–õ–Ø –î–û–í–Ü–î–ù–ò–ö–ê ===
async def directory_menu(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑—É—î –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –¥–æ–≤—ñ–¥–Ω–∏–∫–∞."""
    if update.callback_query:
        await update.callback_query.answer()
    data = await load_directory_data()
    if not data:
        if update.message:
            await update.message.reply_text("–ü–æ–º–∏–ª–∫–∞: –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ –¥–æ–≤—ñ–¥–Ω–∏–∫–∞.")
        return
    keyboard = []
    for category_name in data.keys():
        keyboard.append([InlineKeyboardButton(category_name, callback_data=f"dir_cat:{category_name}")])
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data="main_menu")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    if update.message:
        await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=reply_markup)
    elif update.callback_query:
        await update.callback_query.edit_message_text("–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=reply_markup)
async def directory_show_items(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑—É—î —Å–ø–∏—Å–æ–∫ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ —É –≤–∏–±—Ä–∞–Ω—ñ–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó."""
    query = update.callback_query
    await query.answer()
    _, category_name = query.data.split(':')
    data = await load_directory_data()
    items = data.get(category_name, {})
    if not items:
        await query.edit_message_text("–í —Ü—ñ–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö.", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="dir_menu")]]))
        return
    keyboard = []
    for item_id, item_data in items.items():
        button_text = item_data.get("–Ω–∞–∑–≤–∞", "–ë–µ–∑ –Ω–∞–∑–≤–∏")
        keyboard.append([InlineKeyboardButton(button_text, callback_data=f"dir_item:{category_name}:{item_id}")])
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="dir_menu")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(f"--- **{category_name}** ---", reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
async def directory_show_item_details(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑—É—î –¥–µ—Ç–∞–ª—ñ –≤–∏–±—Ä–∞–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞."""
    query = update.callback_query
    await query.answer()
    _, category_name, item_id = query.data.split(':')
    data = await load_directory_data()
    item_data = data.get(category_name, {}).get(item_id, {})
    if not item_data:
        await query.edit_message_text("–ü–æ–º–∏–ª–∫–∞: –î–∞–Ω—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return
    text = f"**{item_data.get('–Ω–∞–∑–≤–∞', '–ù–µ–≤—ñ–¥–æ–º–æ')}**\n\n"
    if item_data.get("–∞–¥—Ä–µ—Å–∞"):
        text += f"üìç **–ê–¥—Ä–µ—Å–∞:** {item_data['–∞–¥—Ä–µ—Å–∞']}\n"
    if item_data.get("–≥–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏"):
        text += f"‚è∞  **–ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏:** {item_data['–≥–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏']}\n"
    if item_data.get("—Ç–µ–ª–µ—Ñ–æ–Ω"):
        text += f"üìû **–¢–µ–ª–µ—Ñ–æ–Ω:** {item_data['—Ç–µ–ª–µ—Ñ–æ–Ω']}\n"
    keyboard = []
    if item_data.get("map_url"):
        keyboard.append(InlineKeyboardButton("üìç –ü–æ–∫–∞–∑–∞—Ç–∏ –Ω–∞ –∫–∞—Ä—Ç—ñ", url=item_data["map_url"]))
    reply_markup = InlineKeyboardMarkup([keyboard, [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"dir_cat:{category_name}")]])
    await query.edit_message_text(text, parse_mode=ParseMode.MARKDOWN, reply_markup=reply_markup)
async def main_menu_from_callback(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é."""
    query = update.callback_query
    await query.answer()
    keyboard = ReplyKeyboardMarkup(
        [['üì¢ –¢—Ä–∏–≤–æ–≥–∏', 'üí∞ –ö—É—Ä—Å –≤–∞–ª—é—Ç'],
         ['üìù –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è', 'üìù –î–æ–¥–∞—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è'],
         ["‚úçÔ∏è –ó–≤–æ—Ä–æ—Ç–Ω–∏–π –∑–≤'—è–∑–æ–∫", "üó∫Ô∏è –î–æ–≤—ñ–¥–Ω–∏–∫"]],
        resize_keyboard=True
    )
    await query.edit_message_text("–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.", reply_markup=keyboard)
async def send_alert_message(context: ContextTypes.DEFAULT_TYPE, chat_id: int, alert: Dict[str, Any], is_start: bool, sticker_id: Optional[str] = None) -> None:
    """–ù–∞–¥—Å–∏–ª–∞—î —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ —Ç—Ä–∏–≤–æ–≥—É –≤ –∑–∞–∑–Ω–∞—á–µ–Ω–∏–π —á–∞—Ç."""
    region = alert.get('location_title')
    if is_start:
        message = f"üî¥ **–ü–æ–≤—ñ—Ç—Ä—è–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞!**\n\n**{region}**"
    else:
        message = f"üü¢ **–í—ñ–¥–±—ñ–π –ø–æ–≤—ñ—Ç—Ä—è–Ω–æ—ó —Ç—Ä–∏–≤–æ–≥–∏!**\n\n**{region}**"
    try:
        if sticker_id:
            await context.bot.send_sticker(chat_id=chat_id, sticker=sticker_id)
        await context.bot.send_message(chat_id=chat_id, text=message, parse_mode=ParseMode.MARKDOWN)
    except Exception as e:
        logging.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ —Ç—Ä–∏–≤–æ–≥—É –≤ –∫–∞–Ω–∞–ª {chat_id}: {e}", exc_info=True)
# --- –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –¥—ñ–∞–ª–æ–≥—É –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –∑–≤'—è–∑–∫—É (Feedback Conversation) ---
async def feedback_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ—á–∞—Ç–æ–∫ –¥—ñ–∞–ª–æ–≥—É –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –∑–≤'—è–∑–∫—É."""
    await update.message.reply_text("–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –∑–≤'—è–∑–∫—É. –©–æ–± —Å–∫–∞—Å—É–≤–∞—Ç–∏, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å /cancel.")
    return config.FEEDBACK
async def feedback_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–æ–±–ª—è—î –æ—Ç—Ä–∏–º–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –∑–≤'—è–∑–∫—É."""
    feedback_text = update.message.text
    user = update.effective_user
    logging.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –∑–≤–æ—Ä–æ—Ç–Ω–∏–π –∑–≤'—è–∑–æ–∫ –≤—ñ–¥ @{user.username} ({user.id}): {feedback_text}")
    await update.message.reply_text("–î—è–∫—É—é! –í–∞—à –≤—ñ–¥–≥—É–∫ –æ—Ç—Ä–∏–º–∞–Ω–æ. –Ø –ø–µ—Ä–µ–¥–∞–≤ –π–æ–≥–æ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—É. –ú–æ–∂–µ—Ç–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–≤–∏–π –∞–±–æ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ –±–æ—Ç–æ–º.")
    return ConversationHandler.END
async def feedback_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–∫–∞—Å–æ–≤—É—î –¥—ñ–∞–ª–æ–≥ –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –∑–≤'—è–∑–∫—É."""
    await update.message.reply_text("–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–≥—É–∫—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    return ConversationHandler.END
# --- –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –¥—ñ–∞–ª–æ–≥—É –¥–æ–¥–∞–≤–∞–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è (Add Post Conversation) ---
async def add_post_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ—á–∞—Ç–æ–∫ –¥—ñ–∞–ª–æ–≥—É –¥–æ–¥–∞–≤–∞–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è."""
    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –≤–∞—à–æ–≥–æ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è. –©–æ–± —Å–∫–∞—Å—É–≤–∞—Ç–∏, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å /cancel.")
    return config.POST_TITLE
async def add_post_title(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–æ–±–ª—è—î –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è."""
    context.user_data['post_title'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –ø–æ–≤–Ω–∏–π —Ç–µ–∫—Å—Ç –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è:")
    return config.POST_CONTENT
async def add_post_content(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–æ–±–ª—è—î –≤–º—ñ—Å—Ç –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è."""
    context.user_data['post_content'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é (—Ç–µ–ª–µ—Ñ–æ–Ω, –Ω—ñ–∫–Ω–µ–π–º, –ø–æ—Å–∏–ª–∞–Ω–Ω—è):")
    return config.POST_CONTACT
async def add_post_contact(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–æ–±–ª—è—î –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é —Ç–∞ –ø—Ä–æ–ø–æ–Ω—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏."""
    context.user_data['post_contact'] = update.message.text
    post_title = context.user_data['post_title']
    post_content = context.user_data['post_content']
    post_contact = context.user_data['post_contact']
    preview_message = (
        f"**–ó–∞–≥–æ–ª–æ–≤–æ–∫:** {post_title}\n"
        f"**–û–ø–∏—Å:** {post_content}\n"
        f"**–ö–æ–Ω—Ç–∞–∫—Ç–∏:** {post_contact}\n\n"
        f"**–ß–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤—Å–µ –≤–∫–∞–∑–∞–Ω–æ?**\n"
        f"–ù–∞–¥—ñ—à–ª—ñ—Ç—å '–¢–∞–∫' –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∞–±–æ '–ù—ñ' –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è."
    )
    await update.message.reply_text(preview_message, parse_mode=ParseMode.MARKDOWN)
    return config.POST_CONFIRM
async def add_post_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—î –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è."""
    response = update.message.text.lower()
    if response == '—Ç–∞–∫':
        db_session = context.bot_data['db_session']
        author_id = update.effective_user.id
        title = context.user_data['post_title']
        content = context.user_data['post_content']
        contact_info = context.user_data['post_contact']
        await db.save_post(db_session, author_id, title, content, contact_info)
        await update.message.reply_text("–í–∞—à–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!")
        logging.info(f"–ù–æ–≤–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –¥–æ–¥–∞–Ω–æ: {title}")
        context.user_data.clear()
        return ConversationHandler.END
    elif response == '–Ω—ñ':
        await update.message.reply_text("–î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
        context.user_data.clear()
        return ConversationHandler.END
    else:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å '–¢–∞–∫' –∞–±–æ '–ù—ñ'.")
        return config.POST_CONFIRM
async def add_post_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–∫–∞—Å–æ–≤—É—î –¥—ñ–∞–ª–æ–≥ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è."""
    await update.message.reply_text("–î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    context.user_data.clear()
    return ConversationHandler.END
feedback_conversation_handler = ConversationHandler(
    entry_points=[CommandHandler("feedback", feedback_start), MessageHandler(filters.Regex(r'^‚úçÔ∏è –ó–≤–æ—Ä–æ—Ç–Ω–∏–π –∑–≤\'—è–∑–æ–∫$'), feedback_start)],
    states={
        config.FEEDBACK: [MessageHandler(filters.TEXT & ~filters.COMMAND, feedback_received)],
    },
    fallbacks=[CommandHandler("cancel", feedback_cancel)]
)
add_post_conversation_handler = ConversationHandler(
    entry_points=[CommandHandler("add_post", add_post_start), MessageHandler(filters.Regex('^üìù –î–æ–¥–∞—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è$'), add_post_start)],
    states={
        config.POST_TITLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_post_title)],
        config.POST_CONTENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_post_content)],
        config.POST_CONTACT: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_post_contact)],
        config.POST_CONFIRM: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_post_confirm)],
    },
    fallbacks=[CommandHandler("cancel", add_post_cancel)]
)

# --- –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –¥—ñ–∞–ª–æ–≥—É –ø–µ—Ä–µ–∫–ª–∞–¥–∞—á–∞ (Translator Conversation) ---
async def translator_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ—á–∞—Ç–æ–∫ –¥—ñ–∞–ª–æ–≥—É –ø–µ—Ä–µ–∫–ª–∞–¥–∞—á–∞."""
    try:
        with open('languages.json', 'r', encoding='utf-8') as f:
            languages_data = json.load(f)
            available_langs = languages_data.get('available_languages', {})
        keyboard = []
        for code, name in available_langs.items():
            keyboard.append([InlineKeyboardButton(f"{name} ({code.upper()})", callback_data=f"translate_lang:{code}")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É, –Ω–∞ —è–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–µ—Ä–µ–∫–ª–∞—Å—Ç–∏ —Ç–µ–∫—Å—Ç:", reply_markup=reply_markup)
        return TRANSLATOR
    except FileNotFoundError:
        await update.message.reply_text("–í–∏–±–∞—á—Ç–µ, —Ñ–∞–π–ª –∑—ñ —Å–ø–∏—Å–∫–æ–º –º–æ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return ConversationHandler.END
    except json.JSONDecodeError:
        await update.message.reply_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —á–∏—Ç–∞–Ω–Ω—ñ —Ñ–∞–π–ª—É –º–æ–≤. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return ConversationHandler.END

async def translator_lang_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä –º–æ–≤–∏ —Ç–∞ –∑–∞–ø–∏—Ç—É—î —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É."""
    query = update.callback_query
    await query.answer()
    _, target_lang = query.data.split(':')
    context.user_data['target_lang'] = target_lang
    await query.edit_message_text(f"–û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É, –Ω–∞ —è–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–µ—Ä–µ–∫–ª–∞—Å—Ç–∏ —Ç–µ–∫—Å—Ç: **{target_lang.upper()}**\n\n–¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–µ–∫—Å—Ç, —è–∫–∏–π –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–µ—Ä–µ–∫–ª–∞—Å—Ç–∏. –©–æ–± —Å–∫–∞—Å—É–≤–∞—Ç–∏, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å /cancel.", parse_mode=ParseMode.MARKDOWN)
    return TRANSLATOR

async def translator_text_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–µ—Ä–µ–∫–ª–∞–¥–∞—î –æ—Ç—Ä–∏–º–∞–Ω–∏–π —Ç–µ–∫—Å—Ç —ñ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
    text_to_translate = update.message.text
    target_lang = context.user_data.get('target_lang', 'en')
    if not text_to_translate:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É.")
        return TRANSLATOR
    try:
        translated_text = await translator_api.translate_text(text=text_to_translate, source_lang='auto', target_lang=target_lang)
        if translated_text:
            await update.message.reply_text(f"**–ü–µ—Ä–µ–∫–ª–∞–¥:**\n\n`{translated_text}`", parse_mode=ParseMode.MARKDOWN)
        else:
            await update.message.reply_text("–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–∫–ª–∞—Å—Ç–∏ —Ç–µ–∫—Å—Ç. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
    except Exception as e:
        await update.message.reply_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø–µ—Ä–µ–∫–ª–∞–¥—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
    return ConversationHandler.END

async def translator_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–∫–∞—Å–æ–≤—É—î –¥—ñ–∞–ª–æ–≥ –ø–µ—Ä–µ–∫–ª–∞–¥–∞—á–∞."""
    await update.message.reply_text("–ü–µ—Ä–µ–∫–ª–∞–¥ —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    return ConversationHandler.END

translator_conversation_handler = ConversationHandler(
    entry_points=[CommandHandler("translator", translator_start), MessageHandler(filters.Regex('^üó£Ô∏è –ü–µ—Ä–µ–∫–ª–∞–¥–∞—á$'), translator_start)],
    states={
        TRANSLATOR: [
            CallbackQueryHandler(translator_lang_selected, pattern=r'^translate_lang:'),
            MessageHandler(filters.TEXT & ~filters.COMMAND, translator_text_received),
        ],
    },
    fallbacks=[CommandHandler("cancel", translator_cancel)]
)
