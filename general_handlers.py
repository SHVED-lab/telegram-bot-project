from conversation_handlers import translator_start
from directory_handlers import directory_menu
import logging
from telegram import Update, Bot, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.constants import ChatAction, ParseMode
from telegram.ext import ContextTypes, ConversationHandler, MessageHandler, filters, CommandHandler, CallbackQueryHandler
from typing import List, Dict, Any, Optional
from utils import split_text, format_post_message, format_currency_message, is_admin
from aiosqlite import Connection
import config
import db
import api
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start."""
    keyboard = ReplyKeyboardMarkup(
    [['üì¢ –¢—Ä–∏–≤–æ–≥–∏', 'üí∞ –ö—É—Ä—Å –≤–∞–ª—é—Ç'],
     ['üìù –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è', 'üìù –î–æ–¥–∞—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è'],
     ["‚úçÔ∏è –ó–≤–æ—Ä–æ—Ç–Ω–∏–π –∑–≤'—è–∑–æ–∫", "üó£Ô∏è –ü–µ—Ä–µ–∫–ª–∞–¥–∞—á", "üó∫Ô∏è –î–æ–≤—ñ–¥–Ω–∏–∫"]],
    resize_keyboard=True
)
    # 1. –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ñ–æ—Ç–æ —Ç–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é
    await update.message.reply_photo(
        photo=config.WELCOME_PHOTO_ID,
        caption="–ü—Ä–∏–≤—ñ—Ç! –Ø –≤–∞—à –±–æ—Ç, —â–æ —ñ–Ω—Ñ–æ—Ä–º—É—î –ø—Ä–æ –ø–æ–≤—ñ—Ç—Ä—è–Ω—ñ —Ç—Ä–∏–≤–æ–≥–∏, –Ω–æ–≤–∏–Ω–∏ —Ç–∞ –ø–æ–¥—ñ—ó —É –ë—ñ–ª–≥–æ—Ä–æ–¥-–î–Ω—ñ—Å—Ç—Ä–æ–≤—Å—å–∫–æ–º—É.",
        reply_markup=keyboard
    )
    # 2. –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü—ñ—é –¥—Ä—É–≥–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º
    presentation_text = """
üá∫üá¶ –ü—Ä–∏–≤—ñ—Ç! –ó–Ω–∞–π–æ–º—Ç–µ—Å—å –∑ –≤–∞—à–∏–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–º –±–æ—Ç–æ–º –¥–ª—è –ë—ñ–ª–≥–æ—Ä–æ–¥-–î–Ω—ñ—Å—Ç—Ä–æ–≤—Å—å–∫–æ–≥–æ!
–Ø –¥–æ–ø–æ–º–æ–∂—É –≤–∞–º –∑–∞–ª–∏—à–∞—Ç–∏—Å—å –≤ –∫—É—Ä—Å—ñ –ø–æ–¥—ñ–π —Ç–∞ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –≤–∞–∂–ª–∏–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é.
üì¢ **–ì–æ–ª–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:**
‚ö° Ô∏è –û–ø–µ—Ä–∞—Ç–∏–≤–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–≤—ñ—Ç—Ä—è–Ω—ñ —Ç—Ä–∏–≤–æ–≥–∏ —Ç–∞ –≤—ñ–¥–±–æ—ó.
üí∞ –ê–∫—Ç—É–∞–ª—å–Ω–∏–π –∫—É—Ä—Å –≤–∞–ª—é—Ç.
üìù –î–æ—à–∫–∞ –æ–≥–æ–ª–æ—à–µ–Ω—å –¥–ª—è –≤–∞—à–æ—ó —Å–ø—ñ–ª—å–Ω–æ—Ç–∏.
üó∫Ô∏è –ó—Ä—É—á–Ω–∏–π –¥–æ–≤—ñ–¥–Ω–∏–∫ –∫–æ—Ä–∏—Å–Ω–∏—Ö –∑–∞–∫–ª–∞–¥—ñ–≤ —Ç–∞ –ø–æ—Å–ª—É–≥.
‚úçÔ∏è –ó–≤–æ—Ä–æ—Ç–Ω–∏–π –∑–≤'—è–∑–æ–∫ –∑ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–æ–º.
–ó–∞–ø—É—Å–∫–∞–π—Ç–µ —ñ –∫–æ—Ä–∏—Å—Ç—É–π—Ç–µ—Å—å!
‚û°Ô∏è t.me/XuBotAkkerman\_bot
"""
    await update.message.reply_text(presentation_text, parse_mode=ParseMode.MARKDOWN)
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /help."""
    text = (
        "–Ø –º–æ–∂—É —ñ–Ω—Ñ–æ—Ä–º—É–≤–∞—Ç–∏ –≤–∞—Å –ø—Ä–æ –ø–æ–≤—ñ—Ç—Ä—è–Ω—ñ —Ç—Ä–∏–≤–æ–≥–∏ —Ç–∞ –ø–æ–¥—ñ—ó –≤ –ë—ñ–ª–≥–æ—Ä–æ–¥-–î–Ω—ñ—Å—Ç—Ä–æ–≤—Å—å–∫–æ–º—É, –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω–∏–π –∫—É—Ä—Å...\""
    )
    await update.message.reply_text(text)
async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞."""
    db_session = context.bot_data['db_session']
    try:
        current_alerts = await db.get_last_alerts_state(db_session)
        if current_alerts:
            message = f"üî¥ **–ê–∫—Ç–∏–≤–Ω—ñ –ø–æ–≤—ñ—Ç—Ä—è–Ω—ñ —Ç—Ä–∏–≤–æ–≥–∏ –≤ —Ä–µ–≥—ñ–æ–Ω–∞—Ö:**\n\n" + "\n".join(f"- {region}" for region in current_alerts)
        else:
            message = "üü¢ **–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –ø–æ–≤—ñ—Ç—Ä—è–Ω–∏—Ö —Ç—Ä–∏–≤–æ–≥.**"
        await update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç—É—Å—É —Ç—Ä–∏–≤–æ–≥: {e}", exc_info=True)
        await update.message.reply_text("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å –ø–æ–≤—ñ—Ç—Ä—è–Ω–∏—Ö —Ç—Ä–∏–≤–æ–≥. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
async def currency_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –∞–∫—Ç—É–∞–ª—å–Ω–∏–π –∫—É—Ä—Å –≤–∞–ª—é—Ç."""
    logging.info("–û—Ç—Ä–∏–º—É—é –∫—É—Ä—Å–∏ –≤–∞–ª—é—Ç...")
    aiohttp_session = context.bot_data.get('aiohttp_session')
    if not aiohttp_session:
        await update.message.reply_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        return
    data = await api.get_currency_rates(aiohttp_session)
    if data:
        message = format_currency_message(data)
        await update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)
    else:
        await update.message.reply_text("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫—É—Ä—Å–∏ –≤–∞–ª—é—Ç. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
async def announcements_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –æ–≥–æ–ª–æ—à–µ–Ω—å."""
    logging.info("–ü–æ—á–∞—Ç–æ–∫ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏ 'announcements_command'")
    db_session = context.bot_data.get('db_session')
    if not db_session:
        logging.error("–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ db_session.")
        await update.message.reply_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        return
    try:
        posts = await db.get_posts(db_session)
        logging.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –æ–≥–æ–ª–æ—à–µ–Ω—å: {len(posts) if posts else 0}")
        if not posts:
            await update.message.reply_text("–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –æ–≥–æ–ª–æ—à–µ–Ω—å.")
            return
        messages = []
        for post in posts:
            message = format_post_message(post)
            keyboard = None
            if is_admin(update.effective_user.id):
                keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("–í–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"delete_post_{post['id']}") ]])
            messages.append((message, keyboard))
        for msg, kb in messages:
            for part in split_text(msg):
                await update.message.reply_text(part, parse_mode=ParseMode.MARKDOWN, reply_markup=kb)
        logging.info("–£—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è.")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ announcements_command: {e}", exc_info=True)
        await update.message.reply_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –æ–≥–æ–ª–æ—à–µ–Ω—å. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
async def delete_post_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ '–í–∏–¥–∞–ª–∏—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è'."""
    query = update.callback_query
    post_id = int(query.data.split('_')[-1])
    db_session = context.bot_data.get('db_session')
    if not db_session:
        await query.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞.")
        return
    if not is_admin(query.from_user.id):
        await query.answer("–í–∏ –Ω–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä.")
        return
    await db.delete_post(db_session, post_id)
    await query.answer("–û–≥–æ–ª–æ—à–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ.")
    await query.edit_message_text(f"–û–≥–æ–ª–æ—à–µ–Ω–Ω—è #{post_id} —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.")
async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å, —â–æ –Ω–µ —î –∫–æ–º–∞–Ω–¥–∞–º–∏."""
    if update.message.chat.type != 'private':
        return
    if update.message.text == 'üì¢ –¢—Ä–∏–≤–æ–≥–∏':
        await status_command(update, context)
    elif update.message.text == 'üí∞ –ö—É—Ä—Å –≤–∞–ª—é—Ç':
        await currency_command(update, context)
    elif update.message.text == 'üìù –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è':
        await announcements_command(update, context)
    elif update.message.text == 'üó∫Ô∏è –î–æ–≤—ñ–¥–Ω–∏–∫':
        await directory_menu(update, context)
    elif update.message.text == 'üó£Ô∏è –ü–µ—Ä–µ–∫–ª–∞–¥–∞—á':
        await translator_start(update, context)
    else:
        await update.message.reply_text("–í–∏–±–∞—á—Ç–µ, —è –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ—ó –∫–æ–º–∞–Ω–¥–∏. –°–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –º–µ–Ω—é –∞–±–æ –∫–æ–º–∞–Ω–¥–æ—é /help.")
