import logging
from telegram.ext import ContextTypes
from telegram.constants import ParseMode
from typing import List, Dict, Any, Optional
import re
from datetime import datetime
# –°–ø–∏—Å–æ–∫ ID –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤
ADMIN_IDS = [1077089506]
def is_admin(user_id: int) -> bool:
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."""
    return user_id in ADMIN_IDS
def split_text(text: str, max_length: int = 4000) -> List[str]:
    """
    –†–æ–∑–±–∏–≤–∞—î –¥–æ–≤–≥–∏–π —Ç–µ–∫—Å—Ç –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —â–æ –Ω–µ –ø–µ—Ä–µ–≤–∏—â—É—é—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –¥–æ–≤–∂–∏–Ω—É
    –¥–ª—è Telegram, –∑–±–µ—Ä—ñ–≥–∞—é—á–∏ —Ü—ñ–ª—ñ—Å–Ω—ñ—Å—Ç—å –∞–±–∑–∞—Ü—ñ–≤.
    """
    messages = []
    current_message = ""
    for paragraph in text.split('\n\n'):
        if len(current_message) + len(paragraph) + 2 > max_length:
            if current_message:
                messages.append(current_message)
            current_message = paragraph
        else:
            if current_message:
                current_message += '\n\n' + paragraph
            else:
                current_message = paragraph
    if current_message:
        messages.append(current_message)
    return messages
def format_event_message(item: Dict[str, Any], is_today: bool) -> str:
    """–§–æ—Ä–º–∞—Ç—É—î –æ–±'—î–∫—Ç –ø–æ–¥—ñ—ó –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —É –≤–∏–≥–ª—è–¥—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è."""
    if is_today:
        header = "‚ú®     **–ü–æ–¥—ñ—ó –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ:**\n\n"
    else:
        header = "üìÜ **–ê—Ñ—ñ—à–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞:**\n\n"
    text = f"{header}"
    text += f"**{item.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∏')}**\n"
    text += f"üìÖ –î–∞—Ç–∞: {item.get('date', '–ù–µ–≤—ñ–¥–æ–º–æ')}\n"
    text += f"–î–∂–µ—Ä–µ–ª–æ: *{item.get('source', '–ù–µ–≤—ñ–¥–æ–º–æ')}*\n\n"
    text += f"[–î–µ—Ç–∞–ª—å–Ω—ñ—à–µ]({item.get('url', '#')})"
    return text
def format_post_message(post: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç—É—î –æ–±'—î–∫—Ç –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —É –≤–∏–≥–ª—è–¥—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è."""
    message = (
        f"**üì¢ –û–≥–æ–ª–æ—à–µ–Ω–Ω—è: {post.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∏')}**\n\n"
        f"{post.get('content', '–ë–µ–∑ –∑–º—ñ—Å—Ç—É')}\n\n"
        f"**–ö–æ–Ω—Ç–∞–∫—Ç–∏:** {post.get('contact_info', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
    )
    return message
def format_currency_message(data: list) -> str:
    """–§–æ—Ä–º–∞—Ç—É—î –¥–∞–Ω—ñ –∫—É—Ä—Å—É –≤–∞–ª—é—Ç –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —É –≤–∏–≥–ª—è–¥—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è."""
    message = "üí∞ **–ê–∫—Ç—É–∞–ª—å–Ω–∏–π –∫—É—Ä—Å –≤–∞–ª—é—Ç (Monobank)**\n\n"
    for rate in data:
        if rate.get('currencyCodeA') == 840 and rate.get('currencyCodeB') == 980: # USD
            message += f"üá∫üá∏ –î–æ–ª–∞—Ä –°–®–ê (USD)\n"
            message += f"   –ö—É–ø—ñ–≤–ª—è: {rate.get('rateBuy'):.2f} –≥—Ä–Ω\n"
            message += f"   –ü—Ä–æ–¥–∞–∂: {rate.get('rateSell'):.2f} –≥—Ä–Ω\n\n"
        elif rate.get('currencyCodeA') == 978 and rate.get('currencyCodeB') == 980: # EUR
            message += f"üá™üá∫ –Ñ–≤—Ä–æ (EUR)\n"
            message += f"   –ö—É–ø—ñ–≤–ª—è: {rate.get('rateBuy'):.2f} –≥—Ä–Ω\n"
            message += f"   –ü—Ä–æ–¥–∞–∂: {rate.get('rateSell'):.2f} –≥—Ä–Ω\n\n"
    return message
def get_region_name(location_title: str) -> str:
    """–ü–æ–≤–µ—Ä—Ç–∞—î —ñ–º'—è —Ä–µ–≥—ñ–æ–Ω—É –∑ –ø–æ–≤–Ω–æ—ó –Ω–∞–∑–≤–∏, –∞–±–æ —Å–∞–º—É –Ω–∞–∑–≤—É, —è–∫—â–æ —Ä–µ–≥—ñ–æ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."""
    match = re.search(r'\((\w+)\s+–æ–±–ª–∞—Å—Ç—å\)', location_title)
    if match:
        return f"{match.group(1).capitalize()} –æ–±–ª–∞—Å—Ç—å"
    return location_title
# === –ù–û–í–ê –§–£–ù–ö–¶–Ü–Ø: –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–æ–≤—ñ–¥–Ω–∏–∫–∞ ===
import json
import logging
import os
# –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω—É –∑–º—ñ–Ω–Ω—É –¥–ª—è –∫–µ—à—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–æ–≤—ñ–¥–Ω–∏–∫–∞
_DIRECTORY_CACHE = None
async def load_directory_data() -> dict:
    """
    –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –¥–∞–Ω—ñ –¥–æ–≤—ñ–¥–Ω–∏–∫–∞ –∑ —Ñ–∞–π–ª—É directory.json –∑ –∫–µ—à—É–≤–∞–Ω–Ω—è–º.
    –î–∞–Ω—ñ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—é—Ç—å—Å—è –∑ –¥–∏—Å–∫–∞ –ª–∏—à–µ –æ–¥–∏–Ω —Ä–∞–∑, –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É –∑–∞–ø–∏—Ç—ñ.
    """
    global _DIRECTORY_CACHE
    if _DIRECTORY_CACHE is not None:
        logging.info("–î–∞–Ω—ñ –¥–æ–≤—ñ–¥–Ω–∏–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑ –∫–µ—à—É.")
        return _DIRECTORY_CACHE
    file_path = os.path.join(os.path.dirname(__file__), 'directory.json')
    if not os.path.exists(file_path):
        logging.error(f"–§–∞–π–ª –¥–æ–≤—ñ–¥–Ω–∏–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞ —à–ª—è—Ö–æ–º: {file_path}")
        return {}
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
            _DIRECTORY_CACHE = data
            logging.info("–î–∞–Ω—ñ –¥–æ–≤—ñ–¥–Ω–∏–∫–∞ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑ —Ñ–∞–π–ª—É.")
            return data
    except json.JSONDecodeError as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —á–∏—Ç–∞–Ω–Ω—ñ —Ñ–∞–π–ª—É directory.json. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ñ–æ—Ä–º–∞—Ç JSON: {e}")
        return {}
    except Exception as e:
        logging.error(f"–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Ñ–∞–π–ª—É –¥–æ–≤—ñ–¥–Ω–∏–∫–∞: {e}")
        return {}
# =======================================================
async def send_alert_message(context: ContextTypes.DEFAULT_TYPE, chat_id: int, alert: Dict[str, Any], is_start: bool, sticker_id: Optional[str] = None) -> None:
    """–ù–∞–¥—Å–∏–ª–∞—î —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ —Ç—Ä–∏–≤–æ–≥—É –≤ –∑–∞–∑–Ω–∞—á–µ–Ω–∏–π —á–∞—Ç."""
    region = alert.get('location_title')
    if is_start:
        message = f"üî¥ **–ü–æ–≤—ñ—Ç—Ä—è–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞!**\n\n**{region}**"
    else:
        message = f"üü¢ **–í—ñ–¥–±—ñ–π –ø–æ–≤—ñ—Ç—Ä—è–Ω–æ—ó —Ç—Ä–∏–≤–æ–≥–∏!**\n\n**{region}**"
    try:
        if sticker_id:
            await context.bot.send_sticker(chat_id=chat_id, sticker=sticker_id)
        await context.bot.send_message(chat_id=chat_id, text=message, parse_mode=ParseMode.MARKDOWN)
    except Exception as e:
        logging.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ —Ç—Ä–∏–≤–æ–≥—É –≤ –∫–∞–Ω–∞–ª {chat_id}: {e}", exc_info=True)
